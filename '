{-# LANGUAGE OverloadedStrings #-}

module Data.Hjq.Parser
    ( JqFilter (..)
    , parseJqFilter
    ) where

import           Control.Applicative
import           Data.Attoparsec.Text
import           Data.Text            (Text)
import qualified Data.Text            as Text

data JqFilter
    = JqField Text JqFilter
    | JqIndex Int JqFilter
    | JqNil
    deriving (Eq)

instance Read JqFilter where
    readsPrec _ s = case parseJqFilter s of
        Right r -> [(r, "")]
        Left _  -> []

parseJqFilter :: Text -> Either Text JqFilter
parseJqFilter s = case parse (jqFilterParser <* endOfInput) s `feed` "" of
    Done _ r -> Right r
    r        -> Left . Text.pack $ show r

jqFilterParser :: Parser JqFilter
jqFilterParser = jqIndexedField <|> jqField <|> jqIndex <|> jqNil
  where
    jqIndexedField = toIndexedField <$ char '.'
        <*> fieldParser
        <*> indexParser
        <*> jqFilterParser
      where toIndexedField x y z = JqField x (JqIndex y z)

    jqField = JqField <$ char '.'
        <*> fieldParser
        <*> jqFilterParser

    jqIndex = JqIndex <$ char '.'
        <*> indexParser
        <*> jqFilterParser

    jqNil = char '.' *> pure JqNil <|> pure JqNil

    fieldParser = Text.pack <$> many1 letter

    indexParser = char '[' *> (read <$> many1 digit) <* char ']'
